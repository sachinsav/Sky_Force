//Main class

public class Main
{
public static void main(String[]args)
{
gameSetUp game=new gameSetUp("Shooting_Game",500,600);
game.start();
}
}

----------------------------------------------------------------
//Display class

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import javax.swing.JFrame;

public class Display {

private String title;
private int width;
private int height;

public static JFrame frame;
private Canvas canvas;

public Display(String title,int width,int height)
{
this.title = title;
this.width = width;
this.height= height;
createDisplay() ;}

public void createDisplay()
{
frame = new JFrame(title);
frame.setSize(width,height);
frame.setVisible(true);
frame.setLocationRelativeTo(null);
frame.setResizable(false);
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
canvas = new Canvas();
canvas.setPreferredSize(new Dimension(width,height));
canvas.setBackground(new Color(212,154,140));
canvas.setFocusable(false);
frame.add(canvas);
frame.pack();
}

public Canvas getCanvas(){
return canvas ;
}
}

--------------------------------------------------------------------
//gameSetUp class

import java.awt.Graphics;
import java.awt.image.BufferStrategy;

public class gameSetUp implements Runnable{
private String title;
private int width;
private int height;
private Thread thread;
private boolean running;
private BufferStrategy buffer;
private Graphics g;
private int y;
private boolean start;
private gameManager manager;
private Display display;
public static final int gameWidth = 400;
public static final int gameHeight = 400;
public gameSetUp(String title,int width,int height)
{
this.title = title;
this.width = width;
this.height=height;
}
public void init(){

display = new Display(title,width,height);
loadImage.init();
manager=new gameManager();
manager.init();
start=true;
}
public synchronized void start(){
if(running)
return;
running=true;
if(thread==null){
thread=new Thread(this);
thread.start();
}
}
public synchronized void stop(){
if(!(running))
return;
running=false;
try{
thread.join();
}catch (InterruptedException e) {
e.printStackTrace();
}
}
public void tick(){
manager.tick();}
public void render(){

buffer=display.getCanvas().getBufferStrategy();
if(buffer==null){
display.getCanvas().createBufferStrategy(3);
return;
}
g=buffer.getDrawGraphics();
g.clearRect(0, 0,width,height);
//draw  

g.drawImage(loadImage.image,50,50,gameWidth,gameHeight,null);


manager.render(g);
// menu

//end of draw

buffer.show();
g.dispose();
}
public void run()
{
init();
int fps = 50;
double timePerTick = 1000000000/fps;
double delta = 0;
long current = System.nanoTime();
while(running){
delta = delta+(System.nanoTime()-current)/timePerTick;
current= System.nanoTime();
if(delta>=1){
tick();
render();
delta=0;}
}
}
}

----------------------------------------------------------------------------
//gameManager class

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
public class gameManager implements KeyListener{
private Player player;
public static ArrayList<Bullet> bullet;
private ArrayList<Enemy> enemies;
private long current ;
private long delay;
private int health;
private int score;
private boolean start;
private int no;
Score sc;
int highscore;

public gameManager(){
}
public void init(){
Display.frame.addKeyListener(this);
player = new Player((gameSetUp.gameWidth/2)+50,(gameSetUp.gameHeight-60)+50);
player.init();
bullet = new ArrayList<Bullet>();
enemies = new ArrayList<Enemy>();
current = System.nanoTime();
delay = 2000;
health = player.getHealth();
score = 0;
no=2;
}
public void tick(){
if(start){
player.tick();
for(int i = 0;i<bullet.size();i++){
bullet.get(i).tick();
}
long breaks = (System.nanoTime()-current)/1000000;
if(breaks>delay){
	if(score>200)
		no=3;
	if(score>300)
		no=4;
	if(score>500)
		no=5;
	if(score>600)
		no=6;
	if(score>800)
		{no=8;
		Enemy.speed=2;}
	if(score>1500)
		Enemy.speed=3;
	if(score>2500)
		Enemy.speed=4;
for(int i= 0;i<no;i++){
Random rand = new Random();
int randX = rand.nextInt(400);
int randY = rand.nextInt(400);
if(health> 0){
	if(randX>50)
enemies.add(new Enemy(randX,-randY));
}
}
current = System.nanoTime();
}

//enemies
for(int i = 0;i<enemies.size();i++){
if(enemies.get(i).getY()>= 450 -50)
{
	for(int k=0;k<10;k++)
		enemies.get(i).tick();
}
	enemies.get(i).tick();
}
}
}

public void render(Graphics g){
if(start){player.render(g);
// bullet
for(int i=0;i<bullet.size(); i++){
bullet.get(i).render(g);
}
for(int i = 0;i< bullet.size();i++){
if(bullet.get(i).getY()<=50){
bullet.remove(i);
i--;

}}
//enemies
for(int i = 0;i<enemies.size();i++){
if(enemies.get(i).getY()>= 50&&enemies.get(i).getY()<400){
enemies.get(i).render(g);
}
}
//enemies & player collision
for(int i= 0;i<enemies.size();i++){
	int ex=enemies.get(i).getX();
int ey = enemies.get(i).getY();
int px = player.getX();
int py = player.getY();
if(px < (ex + 50) && (px + 60) > ex &&
py < (ey + 50) && (py + 60) > ey){
enemies.remove(i);
i--;
health--;
System.out.println(health);
if(health<=0){
	try {
		sc=new Score(score);
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	highscore=Score.getK();
enemies.removeAll(enemies);
player.setHealth(0);
start = false;
}
}
g.setFont(new Font("arial",Font.BOLD,25));
g.setColor(Color.blue);
if(health<3)
	g.setColor(Color.RED);
g.drawString("Health : "+health, 70, 530);
// bullets  && enemy collision
for(int j = 0 ;j<bullet.size() ;j++){
int bx=bullet.get(j).getX();
int by=bullet.get(j).getY();
if(ex<bx+ 6 && ex + 50 >
bx && ey<by + 6
&& ey + 50> by ){
enemies.remove(i);
i--;
bullet.remove(j);
j--;
score= score + 5;
}
}
g.setColor(Color.blue);
g.setFont(new Font("arial",Font.BOLD, 40));
g.drawString("Score : "+score, 70,500);
}
}
else{g.setFont(new Font("arial",Font.PLAIN,33));
g.drawString("Press enter to start", 100, (gameSetUp.gameHeight/2)+50);
try {
	Score.filein();
} catch (IOException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
highscore=Score.getK();
g.setFont(new Font("arial",Font.BOLD,30));
g.setColor(Color.MAGENTA);
g.drawString("HighScore : "+highscore, 120, 300);
g.setColor(Color.blue);
g.setFont(new Font("arial",Font.BOLD,18));
g.drawString("Made By : Abhishekh , Amit , Sachin .", 5,595 );
}
}
public void keyPressed(KeyEvent e){
int source=e.getKeyCode();
if(source == KeyEvent.VK_ENTER){
start = true;
init();}
}

@Override
public void keyReleased(KeyEvent arg0){
}

@Override
public void keyTyped(KeyEvent arg0){
// TODO Auto-generated method stub
}
}

------------------------------------------------------------------------
//loadImage class

import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.imageio.ImageIO;

public class loadImage{
public static BufferedImage image;
public static BufferedImage entities;
public static BufferedImage player, enemy;
public static void init()
{
image=imageLoader("/whte.png");
entities = imageLoader("/airplane.png");
crop();
}

public static BufferedImage imageLoader(String path)
{
try{
return
ImageIO.read(loadImage.class.
getResource(path));
}catch (IOException e) {
e.printStackTrace();
System.exit(1);
}
return null;}
public static void crop(){
enemy = entities.getSubimage(0, 0, 113, 95);
player = entities.getSubimage(115,0,115,95);
}
}

--------------------------------------------------------------------------
//Player class

import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
public class Player implements KeyListener{
private int x;
private int y;
private boolean left ,right,up,down;
private boolean fire;
private long current;
private long delay;
private int health;
public Player(int x,int y){
this.x=x;
this.y=y;
}
public void init(){
Display.frame.addKeyListener(this);
current = System.nanoTime();
delay = 200;
health = 5;
}
public void tick(){
if(!(health <=0)){
if(left){
if(x>= 50){
x -=4;
}
}
if(right){
if(x<= 450-60){
x += 4;}
}
if(up) {
if(y>=50)
y-=4;

}
if(down) {
	if(y<=(450-60))
	y+=4;
}
if(fire){
long breaks = (System.nanoTime()-current)/1000000;
if(breaks>delay){
gameManager.bullet.add(new Bullet(x+30,y));
current = System.nanoTime();
}

}
}
}
public void render(Graphics g){
if(!(health <= 0)){
g.drawImage(loadImage.player,
x, y, 60, 60,null);
}
}
public void keyPressed(KeyEvent e) {
int source = e.getKeyCode();
if(source == KeyEvent.VK_LEFT){
left= true;
}
if(source == KeyEvent.VK_RIGHT){
right= true;
}
if(source == KeyEvent.VK_UP) {
	up=true;
}
if(source ==KeyEvent.VK_DOWN) {
	down=true;
}
if(source==KeyEvent.VK_B||source==KeyEvent.VK_SPACE)
{
	fire=true;
}
}
public void keyReleased(KeyEvent e) {
int source = e.getKeyCode();
if(source == KeyEvent.VK_LEFT){
left = false;
}
if(source == KeyEvent.VK_RIGHT){
right= false;
}
if(source ==KeyEvent.VK_UP) {
	up=false;
}
if(source==KeyEvent.VK_DOWN) {
	down=false;
}
if(source == KeyEvent.VK_B||source==KeyEvent.VK_SPACE)
{fire=false;}
}
public void keyTyped(KeyEvent e) {
}
public int getX(){
return x;
}
public int getY()
{
return y;
}
public int getHealth(){
return health;}

public void setHealth(int health){
this.health = health;
}
}

-------------------------------------------------------------------------
//Bullet class

import java.awt.Color;
import java.awt.Graphics;

public class Bullet {

private int x;
private int y;
private int speed;
public Bullet(int x, int y)
{
this.x = x-5;
this.y = y;
speed = 10;
}
public void tick()
{
y -= speed;
}
public int getY(){
return y;
}
public int getX(){
return x;
}
public void render(Graphics g){
g.setColor(Color.red);
g.fillRect(x,y, 6, 10);
g.setColor(Color.BLACK);
}
}

---------------------------------------------------------------------------
//Enemy class

import java.awt.Graphics;
public class Enemy {
private int x;
private int y;
public static int speed=1;
public Enemy(int x,int y){
this.x = x;
this.y =y;
}
public void tick(){
y += speed;
}
public void render(Graphics g){
g.drawImage(loadImage.enemy,x,y,50,50,null);
}
public int getX(){
return x;
}
public int getY() {
return y;
}
}

------------------------------------------------------------------------------
//Score class

import java.io.*;
public class Score {
	public static String scoree,k1;
	public static int k;
	public static int score;
	public Score(int score) throws IOException {
		scoree=Integer.toString(score);
		Score.score=score;
		filein();
		fileout();
		filein();
	}
	 public static void fileout() throws IOException
	 {
		 if(score>k)
		 {
		BufferedWriter bf=new BufferedWriter(new FileWriter("play.txt"));
		bf.write(scoree);
		bf.close();
		}
	 }
	 public static void filein() throws IOException
	 {
try{
	BufferedReader br=new BufferedReader(new FileReader("play.txt"));
	k1=br.readLine();
	k=Integer.valueOf(k1);
}
catch(FileNotFoundException e)
{
	BufferedWriter bf=new BufferedWriter(new FileWriter("play.txt"));
		bf.write("0");
		bf.close();
}
	 }
	 public static int getK() {
		 return(k);
	 }
	 
	

}

------------------------------------------------------------------------------------